-- MySQL Script generated by MySQL Workbench
-- 12/06/14 13:50:51
-- Model: CurriculumManagmentERD    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema CMS
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `CMS` ;

-- -----------------------------------------------------
-- Schema CMS
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `CMS` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `CMS` ;

-- -----------------------------------------------------
-- Table `CMS`.`Standing`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`Standing` ;

CREATE TABLE IF NOT EXISTS `CMS`.`Standing` (
  `std_id` TINYINT NOT NULL,
  `std_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`std_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`Student`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`Student` ;

CREATE TABLE IF NOT EXISTS `CMS`.`Student` (
  `stu_id` INT NOT NULL,
  `stu_lname` VARCHAR(80) NOT NULL,
  `stu_fname` VARCHAR(80) NOT NULL,
  `stu_standing` TINYINT NOT NULL,
  PRIMARY KEY (`stu_id`),
  INDEX `fk_Student_Standing1_idx` (`stu_standing` ASC),
  CONSTRAINT `fk_Student_Standing1`
    FOREIGN KEY (`stu_standing`)
    REFERENCES `CMS`.`Standing` (`std_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`School`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`School` ;

CREATE TABLE IF NOT EXISTS `CMS`.`School` (
  `sch_code` VARCHAR(5) NOT NULL,
  `sch_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`sch_code`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`Major`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`Major` ;

CREATE TABLE IF NOT EXISTS `CMS`.`Major` (
  `maj_code` VARCHAR(5) NOT NULL,
  `maj_title` VARCHAR(80) NOT NULL,
  `sch_code` VARCHAR(5) NOT NULL,
  `maj_themarea_required` BIT(1) NOT NULL,
  PRIMARY KEY (`maj_code`),
  INDEX `fk_Major_Department1_idx` (`sch_code` ASC),
  CONSTRAINT `fk_Major_Department1`
    FOREIGN KEY (`sch_code`)
    REFERENCES `CMS`.`School` (`sch_code`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`Course`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`Course` ;

CREATE TABLE IF NOT EXISTS `CMS`.`Course` (
  `crs_code` VARCHAR(10) NOT NULL,
  `crs_title` VARCHAR(80) NOT NULL,
  `crs_credits` TINYINT NOT NULL,
  `crs_type` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`crs_code`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`EnrollStatus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`EnrollStatus` ;

CREATE TABLE IF NOT EXISTS `CMS`.`EnrollStatus` (
  `est_code` CHAR(1) NOT NULL,
  `est_title` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`est_code`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`Enroll`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`Enroll` ;

CREATE TABLE IF NOT EXISTS `CMS`.`Enroll` (
  `stu_id` INT NOT NULL,
  `crs_code` VARCHAR(10) NOT NULL,
  `enr_completed` CHAR(1) NOT NULL,
  PRIMARY KEY (`stu_id`, `crs_code`),
  INDEX `fk_Enroll_Student_idx` (`stu_id` ASC),
  INDEX `fk_Enroll_Course1_idx` (`crs_code` ASC),
  INDEX `fk_Enroll_EnrollStatus1_idx` (`enr_completed` ASC),
  CONSTRAINT `fk_Enroll_Student1`
    FOREIGN KEY (`stu_id`)
    REFERENCES `CMS`.`Student` (`stu_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Enroll_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Enroll_EnrollStatus1`
    FOREIGN KEY (`enr_completed`)
    REFERENCES `CMS`.`EnrollStatus` (`est_code`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`OtherPrerequisite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`OtherPrerequisite` ;

CREATE TABLE IF NOT EXISTS `CMS`.`OtherPrerequisite` (
  `crs_code` VARCHAR(10) NOT NULL,
  `prr_other` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`crs_code`),
  INDEX `fk_OtherPrerequisite_Course1_idx` (`crs_code` ASC),
  CONSTRAINT `fk_OtherPrerequisite_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`Minor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`Minor` ;

CREATE TABLE IF NOT EXISTS `CMS`.`Minor` (
  `min_code` VARCHAR(5) NOT NULL,
  `min_title` VARCHAR(80) NOT NULL,
  `sch_code` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`min_code`),
  INDEX `fk_Minor_Department1_idx` (`sch_code` ASC),
  CONSTRAINT `fk_Minor_Department1`
    FOREIGN KEY (`sch_code`)
    REFERENCES `CMS`.`School` (`sch_code`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`CoursePrerequisite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`CoursePrerequisite` ;

CREATE TABLE IF NOT EXISTS `CMS`.`CoursePrerequisite` (
  `crs_code` VARCHAR(10) NOT NULL,
  `prr_code` VARCHAR(10) NOT NULL,
  INDEX `fk_CoursePrerequisite_Course1_idx` (`crs_code` ASC),
  INDEX `fk_CoursePrerequisite_Course2_idx` (`prr_code` ASC),
  PRIMARY KEY (`crs_code`, `prr_code`),
  CONSTRAINT `fk_CoursePrerequisite_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CoursePrerequisite_Course2`
    FOREIGN KEY (`prr_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`StandingPrerequisite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`StandingPrerequisite` ;

CREATE TABLE IF NOT EXISTS `CMS`.`StandingPrerequisite` (
  `crs_code` VARCHAR(10) NOT NULL,
  `prr_standing` TINYINT NOT NULL,
  PRIMARY KEY (`crs_code`),
  INDEX `fk_StandingPrerequisite_Course1_idx` (`crs_code` ASC),
  INDEX `fk_StandingPrerequisite_Standing1_idx` (`prr_standing` ASC),
  CONSTRAINT `fk_StandingPrerequisite_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_StandingPrerequisite_Standing1`
    FOREIGN KEY (`prr_standing`)
    REFERENCES `CMS`.`Standing` (`std_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`PlansToEnroll`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`PlansToEnroll` ;

CREATE TABLE IF NOT EXISTS `CMS`.`PlansToEnroll` (
  `stu_id` INT NOT NULL,
  `crs_code` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`stu_id`, `crs_code`),
  INDEX `fk_Enroll_Student_idx` (`stu_id` ASC),
  INDEX `fk_Enroll_Course1_idx` (`crs_code` ASC),
  CONSTRAINT `fk_PlansToEnroll_Student1`
    FOREIGN KEY (`stu_id`)
    REFERENCES `CMS`.`Student` (`stu_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_PlanToEnroll_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`CourseCorequisite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`CourseCorequisite` ;

CREATE TABLE IF NOT EXISTS `CMS`.`CourseCorequisite` (
  `Course_crs_code` VARCHAR(10) NOT NULL,
  `prr_code` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`Course_crs_code`, `prr_code`),
  INDEX `fk_CourseCorequisite_Course1_idx` (`Course_crs_code` ASC),
  INDEX `fk_CourseCorequisite_Course2_idx` (`prr_code` ASC),
  CONSTRAINT `fk_CourseCorequisite_Course1`
    FOREIGN KEY (`Course_crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CourseCorequisite_Course2`
    FOREIGN KEY (`prr_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`CourseEquivalent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`CourseEquivalent` ;

CREATE TABLE IF NOT EXISTS `CMS`.`CourseEquivalent` (
  `crs_code` VARCHAR(10) NOT NULL,
  `equ_code` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`crs_code`, `equ_code`),
  INDEX `fk_CourseAlternative_Course2_idx` (`equ_code` ASC),
  CONSTRAINT `fk_CourseAlternative_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CourseAlternative_Course2`
    FOREIGN KEY (`equ_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`MajorThematicArea`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`MajorThematicArea` ;

CREATE TABLE IF NOT EXISTS `CMS`.`MajorThematicArea` (
  `themarea_code` VARCHAR(10) NOT NULL,
  `themarea_title` VARCHAR(80) NOT NULL,
  `maj_code` VARCHAR(5) NOT NULL,
  `themarea_mincredits` TINYINT NOT NULL,
  PRIMARY KEY (`themarea_code`, `maj_code`),
  INDEX `fk_MajorThematicArea_Major1_idx` (`maj_code` ASC),
  CONSTRAINT `fk_MajorThematicArea_Major1`
    FOREIGN KEY (`maj_code`)
    REFERENCES `CMS`.`Major` (`maj_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`StudentMajor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`StudentMajor` ;

CREATE TABLE IF NOT EXISTS `CMS`.`StudentMajor` (
  `stu_id` INT NOT NULL,
  `maj_code` VARCHAR(5) NOT NULL,
  `themarea_code` VARCHAR(10) NULL,
  PRIMARY KEY (`stu_id`, `maj_code`),
  INDEX `fk_StudentMajor_Major1_idx` (`maj_code` ASC),
  INDEX `fk_StudentMajor_MajorThematicArea1_idx` (`themarea_code` ASC),
  CONSTRAINT `fk_StudentMajor_Student1`
    FOREIGN KEY (`stu_id`)
    REFERENCES `CMS`.`Student` (`stu_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_StudentMajor_Major1`
    FOREIGN KEY (`maj_code`)
    REFERENCES `CMS`.`Major` (`maj_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_StudentMajor_MajorThematicArea1`
    FOREIGN KEY (`themarea_code`)
    REFERENCES `CMS`.`MajorThematicArea` (`themarea_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`StudentMinor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`StudentMinor` ;

CREATE TABLE IF NOT EXISTS `CMS`.`StudentMinor` (
  `stu_id` INT NOT NULL,
  `min_code` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`stu_id`, `min_code`),
  INDEX `fk_StudentMinor_Minor1_idx` (`min_code` ASC),
  CONSTRAINT `fk_StudentMinor_Student1`
    FOREIGN KEY (`stu_id`)
    REFERENCES `CMS`.`Student` (`stu_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_StudentMinor_Minor1`
    FOREIGN KEY (`min_code`)
    REFERENCES `CMS`.`Minor` (`min_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`MajorArea`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`MajorArea` ;

CREATE TABLE IF NOT EXISTS `CMS`.`MajorArea` (
  `area_code` VARCHAR(10) NOT NULL,
  `area_title` VARCHAR(80) NOT NULL,
  `maj_code` VARCHAR(5) NOT NULL,
  `area_mincredits` TINYINT NOT NULL,
  PRIMARY KEY (`area_code`, `maj_code`),
  INDEX `fk_MajorArea_Major1_idx` (`maj_code` ASC),
  CONSTRAINT `fk_MajorArea_Major1`
    FOREIGN KEY (`maj_code`)
    REFERENCES `CMS`.`Major` (`maj_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`CourseMajorArea`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`CourseMajorArea` ;

CREATE TABLE IF NOT EXISTS `CMS`.`CourseMajorArea` (
  `crs_code` VARCHAR(10) NOT NULL,
  `area_code` VARCHAR(10) NOT NULL,
  `maj_code` VARCHAR(5) NOT NULL,
  `alt_crs_code` VARCHAR(10) NULL,
  PRIMARY KEY (`crs_code`, `area_code`, `maj_code`),
  INDEX `fk_CourseMajorArea_MajorArea1_idx` (`area_code` ASC, `maj_code` ASC),
  INDEX `fk_CourseMajorArea_Course2_idx` (`alt_crs_code` ASC),
  CONSTRAINT `fk_CourseMajorArea_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CourseMajorArea_MajorArea1`
    FOREIGN KEY (`area_code` , `maj_code`)
    REFERENCES `CMS`.`MajorArea` (`area_code` , `maj_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CourseMajorArea_Course2`
    FOREIGN KEY (`alt_crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`MinorArea`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`MinorArea` ;

CREATE TABLE IF NOT EXISTS `CMS`.`MinorArea` (
  `area_code` VARCHAR(10) NOT NULL,
  `area_title` VARCHAR(80) NOT NULL,
  `min_code` VARCHAR(5) NOT NULL,
  `area_mincredits` TINYINT NOT NULL,
  PRIMARY KEY (`area_code`, `min_code`),
  INDEX `fk_MinorArea_Minor1_idx` (`min_code` ASC),
  CONSTRAINT `fk_MinorArea_Minor1`
    FOREIGN KEY (`min_code`)
    REFERENCES `CMS`.`Minor` (`min_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`CourseMinorArea`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`CourseMinorArea` ;

CREATE TABLE IF NOT EXISTS `CMS`.`CourseMinorArea` (
  `crs_code` VARCHAR(10) NOT NULL,
  `area_code` VARCHAR(10) NOT NULL,
  `min_code` VARCHAR(5) NOT NULL,
  `alt_crs_code` VARCHAR(10) NULL,
  PRIMARY KEY (`crs_code`, `area_code`, `min_code`),
  INDEX `fk_CourseMinorArea_MinorArea1_idx` (`area_code` ASC, `min_code` ASC),
  INDEX `fk_CourseMinorArea_Course2_idx` (`alt_crs_code` ASC),
  CONSTRAINT `fk_CourseMinorArea_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CourseMinorArea_MinorArea1`
    FOREIGN KEY (`area_code` , `min_code`)
    REFERENCES `CMS`.`MinorArea` (`area_code` , `min_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CourseMinorArea_Course2`
    FOREIGN KEY (`alt_crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CMS`.`CourseMajorThematicArea`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CMS`.`CourseMajorThematicArea` ;

CREATE TABLE IF NOT EXISTS `CMS`.`CourseMajorThematicArea` (
  `crs_code` VARCHAR(10) NOT NULL,
  `themarea_code` VARCHAR(10) NOT NULL,
  `maj_code` VARCHAR(5) NOT NULL,
  `alt_crs_code` VARCHAR(10) NULL,
  PRIMARY KEY (`crs_code`, `themarea_code`, `maj_code`),
  INDEX `fk_CourseMajorThematicArea_MajorThematicArea1_idx` (`themarea_code` ASC, `maj_code` ASC),
  INDEX `fk_CourseMajorThematicArea_Course2_idx` (`alt_crs_code` ASC),
  CONSTRAINT `fk_CourseMajorThematicArea_Course1`
    FOREIGN KEY (`crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CourseMajorThematicArea_MajorThematicArea1`
    FOREIGN KEY (`themarea_code` , `maj_code`)
    REFERENCES `CMS`.`MajorThematicArea` (`themarea_code` , `maj_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CourseMajorThematicArea_Course2`
    FOREIGN KEY (`alt_crs_code`)
    REFERENCES `CMS`.`Course` (`crs_code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `CMS` ;

-- -----------------------------------------------------
-- procedure p_maj_areareq
-- -----------------------------------------------------

USE `CMS`;
DROP procedure IF EXISTS `CMS`.`p_maj_areareq`;

DELIMITER $$
USE `CMS`$$
-- Stored procedure to get a list of all areas in the student's major and calculate
-- the missing credits in each of those areas.  
CREATE PROCEDURE p_maj_areareq (inp_stu_id INTEGER, var_maj_code VARCHAR(5))
BEGIN
	DECLARE done INTEGER DEFAULT 0;
	DECLARE var_area_title VARCHAR(45);
    DECLARE var_area_code VARCHAR(10);
	DECLARE var_area_mincredits TINYINT;
    DECLARE stu_areacredits TINYINT;
	
    -- cur_majarea goes through all areas of a certain major
    DECLARE cur_majarea CURSOR FOR
		SELECT area_code, area_title, area_mincredits
        FROM MajorArea
        WHERE maj_code = var_maj_code;
	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE=1; 
    
    -- Return error, if student ID was not found
    IF inp_stu_id NOT IN (SELECT stu_id FROM Student) THEN
		SIGNAL SQLSTATE '45000' 
			SET message_text = 'Your student ID was not found in our database.';
	END IF;
    
    DROP TEMPORARY TABLE IF EXISTS AreaTable;
    DROP TEMPORARY TABLE IF EXISTS Log;
	
    CREATE TEMPORARY TABLE AreaTable (
		maj_code VARCHAR(5), 
        area_code VARCHAR(10), 
        area_mincredits TINYINT, 
        crs_code VARCHAR(10), 
        crs_title VARCHAR(80), 
        crs_credits TINYINT, 
        enr_completed CHAR(1)); 
	
    -- AreaTable contains information about all areas in a major, their courses and whether a certain student has completed them
    INSERT INTO AreaTable (SELECT MaCmaC.*, enr_completed FROM
							(SELECT MA.maj_code, MA.area_code, MA.area_mincredits, CMA.crs_code, C.crs_title, C.crs_credits
								FROM MajorArea MA JOIN CourseMajorArea CMA JOIN Course C
								ON MA.maj_code = CMA.maj_code AND MA.area_code = CMA.area_code AND CMA.crs_code = C.crs_code
                                WHERE MA.maj_code = var_maj_code) AS MaCmaC
							LEFT JOIN
							Enroll E
							ON MaCmaC.crs_code = E.crs_code
							WHERE stu_id = inp_stu_id OR stu_id IS NULL);
	
    -- Logs are used for the output (due to a missing PRINT function in MySQL)
	CREATE TEMPORARY TABLE Log (
		log_area_code VARCHAR(10),
		log_area_title VARCHAR(80), 
        log_completed VARCHAR(5), 
        log_missingcredits TINYINT); 
    
	OPEN cur_majarea;

	area_loop: LOOP
		FETCH cur_majarea INTO var_area_code, var_area_title, var_area_mincredits;
        IF done = 1 THEN
			LEAVE area_loop;
		END IF;
        
        -- stu_areacredits calculates the sum of credits for courses a certain student has completed in a certain area
        SET stu_areacredits = IFNULL((SELECT SUM(crs_credits) FROM AreaTable 
									WHERE maj_code = var_maj_code 
									AND area_code = var_area_code
									AND enr_completed IN ('P', 'C')),0);
        IF  stu_areacredits >= var_area_mincredits THEN
			INSERT INTO Log VALUES (var_area_code, var_area_title , 'YES', var_area_mincredits-stu_areacredits);
		ELSE INSERT INTO Log VALUES (var_area_code, var_area_title, 'NO', var_area_mincredits-stu_areacredits);
        END IF;
	END LOOP;
    CLOSE cur_majarea;
    SELECT * FROM Log;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_min_areareq
-- -----------------------------------------------------

USE `CMS`;
DROP procedure IF EXISTS `CMS`.`p_min_areareq`;

DELIMITER $$
USE `CMS`$$
-- Stored procedure to get a list of all areas in the student's minor and calculate
-- the missing credits in each of those areas. 
CREATE PROCEDURE p_min_areareq (inp_stu_id INTEGER, var_min_code VARCHAR(5))
BEGIN
	DECLARE done INTEGER DEFAULT 0;
	DECLARE var_area_title VARCHAR(45);
    DECLARE var_area_code VARCHAR(10);
	DECLARE var_area_mincredits TINYINT;
    DECLARE stu_areacredits TINYINT;
	
    -- cur_minarea goes through all areas of a certain minor
    DECLARE cur_minarea CURSOR FOR
		SELECT area_code, area_title, area_mincredits
        FROM MinorArea
        WHERE min_code = var_min_code;
	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE=1; 
	
    -- Return error, if student ID was not found
    IF inp_stu_id NOT IN (SELECT stu_id FROM Student) THEN
		SIGNAL SQLSTATE '45000' 
			SET message_text = 'Your student ID was not found in our database.';
	END IF;
    
    DROP TEMPORARY TABLE IF EXISTS AreaTable;
    DROP TEMPORARY TABLE IF EXISTS Log;
	
    CREATE TEMPORARY TABLE AreaTable (
		min_code VARCHAR(5), 
        area_code VARCHAR(10), 
        area_mincredits TINYINT, 
        crs_code VARCHAR(10), 
        crs_title VARCHAR(80), 
        crs_credits TINYINT, 
        enr_completed CHAR(1)); 
    
    -- AreaTable contains information about all areas in a minor, their courses and whether a certain student has completed them
    INSERT INTO AreaTable (SELECT MaCmaC.*, enr_completed FROM
							(SELECT MA.min_code, MA.area_code, MA.area_mincredits, CMA.crs_code, C.crs_title, C.crs_credits
								FROM MinorArea MA JOIN CourseMinorArea CMA JOIN Course C
								ON MA.min_code = CMA.min_code AND MA.area_code = CMA.area_code AND CMA.crs_code = C.crs_code
                                WHERE MA.min_code = var_min_code) AS MaCmaC
							LEFT JOIN
							Enroll E
							ON MaCmaC.crs_code = E.crs_code
							WHERE stu_id = inp_stu_id OR stu_id IS NULL);
    
    -- Logs are used for the output (due to a missing PRINT function in MySQL)
	CREATE TEMPORARY TABLE Log (
		log_area_code VARCHAR(10), 
        log_area_title VARCHAR(80),
        log_completed VARCHAR(5), 
        log_missingcredits TINYINT); 
    
	OPEN cur_minarea;

	area_loop: LOOP
		FETCH cur_minarea INTO var_area_code, var_area_title, var_area_mincredits;
        IF done = 1 THEN
			LEAVE area_loop;
		END IF;
        
        -- stu_areacredits calculates the sum of credits for courses a certain student has completed in a certain area
        SET stu_areacredits = IFNULL((SELECT SUM(crs_credits) FROM AreaTable 
									WHERE min_code = var_min_code 
									AND area_code = var_area_code
									AND enr_completed IN ('P', 'C')),0);
        IF  stu_areacredits >= var_area_mincredits THEN
			INSERT INTO Log VALUES (var_area_code, var_area_title , 'YES', var_area_mincredits-stu_areacredits);
		ELSE INSERT INTO Log VALUES (var_area_code, var_area_title, 'NO', var_area_mincredits-stu_areacredits);
        END IF;
	END LOOP;
    CLOSE cur_minarea;
    SELECT * FROM Log;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_maj_areacoursereq
-- -----------------------------------------------------

USE `CMS`;
DROP procedure IF EXISTS `CMS`.`p_maj_areacoursereq`;

DELIMITER $$
USE `CMS`$$
CREATE PROCEDURE p_maj_areacoursereq (i_stu_id INTEGER, i_maj_code VARCHAR(5),  i_area_code VARCHAR(10))
BEGIN
	SELECT MaCmaC.*, enr_completed FROM
				(SELECT CMA.crs_code, C.crs_title, C.crs_credits
					FROM MajorArea MA JOIN CourseMajorArea CMA JOIN Course C
					ON MA.maj_code = CMA.maj_code AND MA.area_code = CMA.area_code AND CMA.crs_code = C.crs_code
					WHERE MA.maj_code = i_maj_code
					AND MA.area_code = i_area_code) AS MaCmaC
				LEFT JOIN
				Enroll E
				ON MaCmaC.crs_code = E.crs_code
				WHERE stu_id = i_stu_id OR stu_id IS NULL;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_min_areacoursereq
-- -----------------------------------------------------

USE `CMS`;
DROP procedure IF EXISTS `CMS`.`p_min_areacoursereq`;

DELIMITER $$
USE `CMS`$$
CREATE PROCEDURE p_min_areacoursereq (i_stu_id INTEGER, i_min_code VARCHAR(5),  i_area_code VARCHAR(10))
BEGIN
	SELECT MaCmaC.*, enr_completed FROM
				(SELECT CMA.crs_code, C.crs_title, C.crs_credits
					FROM MinorArea MA JOIN CourseMinorArea CMA JOIN Course C
					ON MA.min_code = CMA.min_code AND MA.area_code = CMA.area_code AND CMA.crs_code = C.crs_code
					WHERE MA.min_code = i_min_code
					AND MA.area_code = i_area_code) AS MaCmaC
				LEFT JOIN
				Enroll E
				ON MaCmaC.crs_code = E.crs_code
				WHERE stu_id = i_stu_id OR stu_id IS NULL;
END
$$

DELIMITER ;
USE `CMS`;

DELIMITER $$

USE `CMS`$$
DROP TRIGGER IF EXISTS `CMS`.`Enroll_BEFORE_INSERT` $$
USE `CMS`$$
CREATE DEFINER = CURRENT_USER TRIGGER Enroll_BEFORE_INSERT BEFORE INSERT ON `Enroll` FOR EACH ROW
    BEGIN
		IF NEW.enr_completed NOT IN ('P','F','C')
			THEN SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'Cannot insert line. Invalid enr_completed value.';
		END IF;
	END;$$


USE `CMS`$$
DROP TRIGGER IF EXISTS `CMS`.`Enroll_BEFORE_UPDATE` $$
USE `CMS`$$
CREATE DEFINER = CURRENT_USER TRIGGER Enroll_BEFORE_UPDATE BEFORE UPDATE ON `Enroll` FOR EACH ROW
	BEGIN
		IF NEW.enr_completed NOT IN ('P','F','C')
			THEN SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'Cannot update line. Invalid enr_completed value.';
		END IF;
	END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
